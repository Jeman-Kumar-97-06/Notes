Still pending :--
	Phases of event propagation.
	Uses of 'use strict'.
	Effect of 'use strict' on hoisting.
	Javascript Event Loop.

#######################################################################################################################################################

Javascript :--

	* Declaring :-- var x;
			 let y;
			 const z;
	* Initializing with value :--
			 var x = 'jeman';

-------------------------------------------------------------------------------------------------------------------------------------------------------

	* Function Declaration vs Expression :--
		* Declaration is when function is declared with 'function' keyword.
		* Ex :-- 
			function func(x){
				console.log(x)
				return;
				}
			func();
		* Expression is when function is declared and assigned to a variable.
		* Ex :--
			const func = (x) => {
				console.log(x);
				return;
				}
			const func = function(x){
				console.log(x);
				return;
				}

--------------------------------------------------------------------------------------------------------------------------------------------------------

	* JS Hoisting :--
		* Hoisting is a process where JS moves Declarations to the top of their scope before the code is executed.
		* This doesn't mean the code is physically moved. JS behaves as if it did.
		* Only declarations are hoisted. Values or Assignments are not.
		* Different Treatment for 'var','let','const' and functions.
		* declaration of variables with 'var' is always hoisted. But the when using the value before initialization, it will be 'undefined'.
		* let/const: Declarations are hoisted but are not initialized. Accessing them before declaration results in 'Reference Error'.
		* Function declarations : Both declaration and function body are hoisted. This means you can happily run a function before the definition.
		* Function Expressions  : The variable declarations is hoisted, the function itself cant' be used before the runtime.
		* Ex :-- 
			>> console.log(x);
			>> let x = 100;
			* The above code doesn't give error but prints 'undefined'
		* 
		Type	                | Hoisted?		| Initialized?		| Usable Before Declaration?
		--------------------------------------------------------------------------------------------------------
		var	  		| Yes			| Yes, as undefined	| Yes (but value is undefined)
		--------------------------------------------------------------------------------------------------------
		let	  		| Yes			| No (TDZ applies)	| No
		--------------------------------------------------------------------------------------------------------
		const	  		| Yes			| No (TDZ applies)	| No
		--------------------------------------------------------------------------------------------------------
		Function  Declaration	| Yes (with body)	| Yes			| Yes
		--------------------------------------------------------------------------------------------------------
		Function  Expression	| Yes (variable only)	| No			| No
----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	* The 'parseInt' function :--
		* Ex :-- >> console.log(parseInt(10)) ------> Output :--10
			 >> console.log(parseInt("10+2")) --> Output :--10
			 >> console.log(parseInt("7am")) ---> Output :--7
			 >> console.log(parseInt("a")) -----> Output :--NaN --> Not a Number
		* This function stops parsing as soon as it comes across something that it can't parse as Int.

----------------------------------------------------------------------------------------------------------------------------------------------------------

	* JS 'at' vs 'charAt' :-- both of them take a index and gives the char at that index
		* 'at' :--
			* introduced in ES2022.
			* Can access chars with both +ve -ve indexes.
			* Returns 'undefined' if the index is out of range.
			* Works with Strings and Arrays.
		* 'charAt' :--
			* A legacy method available since js was created.
			* Only accepts +ve indexes.
			* Returns empty string if index is out of range.
			* Works only with Strings.
		
----------------------------------------------------------------------------------------------------------------------------------------------------------

	* TypeOf:--
		Ex :-- 
			console.log(typeof 'jeman'); --> string
			console.log(typeof 2);---------> number
			
			let x = {'name':"jeman"}
			console.log(typeof x);---------> object
			console.log(typeof [1,2,3]);---> object (it doens't say array)
			
		* JS "typeof" operator only distinguishes between string,number,boolean and function
		* Array and Objects are treated as objects only.
		* Bcoz arrays are internally treated as 'objects' in js.
		* If you specifically want to check the type:--
			* >> console.log(Array.isArray(x));---> gives true or false.

----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	* Destructuring Objects/Strings/Arrays :-- An assignment syntax used to unpack object properties into variables.
		Ex1 :-- 
			const person = { firstName : "John", lastName : "Doe", age : 50 };
			let {firstName, lastName} = person;
			console.log(firstName) --> John
		Ex2 :--
			const person = { firstName : "John", lastName : "Doe", age : 50 };
			let {firstName,lastName:lName} = person;
			console.log(lName) --> Doe
		Ex3 :--
			const person = {id:339,name:"Fred",age:42,education:{degree:"Masters"}}
			let {education:{degree}} = person;
			console.log(degree) --> "Masters"
		Ex4 :--
			let name = 'Jemankumar';
			let [a1,a2,a3,a4,a5] = name;
			console.log(a1) --> "J"
			console.log(a5) --> "n"
		Ex5 :--
			let fruits = ["Bananas","Oranges","Apples","Mangoes"];
			
			let [f1,f2] = fruits;
			console.log(f1) --> "Bananas";
			console.log(f2) --> "Oranges";
			
			let [f1,,,f2] = fruits;
			console.log(f1) --> "Bananas";
			console.log(f2) --> "Mangoes";
			
			let {[0]:f1,[2]:f2} = fruits;
			console.log(f1) --> "Bananas";
			console.log(f2) --> "Apples";
		
		Ex6 :--
			let fname = 'Jeman';
			let lname = 'Kumar';
			[fname,lname] = [lname,fname]; --> Values swapped.
			
		Ex7 :--
			const numbers = [10,20,30,40,50];
			const [a,b,...rest] = numbers; --> Using Spread Operator
			console.log(rest) --> [30,40,50];
			
----------------------------------------------------------------------------------------------------------------------------------------------------------
		
	* Using Spread Operator:--
		Ex :-- 
			const myV1 = {brand : 'Ford',model : 'Mustange',color : 'red'};
			const myV2 = {type : 'car',year : 2011, color : 'yellow' };
			const myV1V2 = {...myV1, ...myV2};
			console.log(myV1V2) --> {brand: 'Ford',model: 'Mustang',color: 'yellow',type: 'car',year: 2021} --> This is a Deep copy.

----------------------------------------------------------------------------------------------------------------------------------------------------------

	* Difference between Shallow Copy and Deep Copy :--
		* Shallow Copy :--
			* A shallow copy of an object is a copy whose properties share the same references as those of the source object from which the copy 
			was made.
			* Here when you make changes to the copy the original object will also change.
		* Deep Copy :--	
			* A deep copy of an object is a copy whose properties do not share the same references as those of the source object from which the
			copy was made
			* Here when you make changes to the copy the original object will NOT change.
			
		# Primitive Data types like Number, String, Boolean, undefined, null will make a deep copy by default.
			Ex :-- 
				>> const a = 5;
				>> let b   = a;
				>> b       = 6;
				>> console.log(b); --> will give 6
				>> console.log(a); --> will give 5
		# Composite Data types like Objects and Arrays will make a shallow copy by default.
			Ex :-- 
				>> const a = { en : "hello",de : "Hallo",pt : "Ola" }
				>> let b   = a;
				>> b.pt    = 'Oi';
				>> console.log(b.pt);
				>> console.log(a.pt);
		# You can use Spread operator to make a deep copy of an object.
			Ex :-- 
				>> const a = {en:"Bye",de:"Tschuss"};
				>> let b   = {...a};
				>> b.de    = 'Ciao';
				>> console.log(b.de); --> Ciao
				>> console.log(a.de); --> Tschuss
		# Making Deep copies of Objects without Thinking :--
			Ex :-- 
				>> const a = {foods:{dinner:'Pasta'}};
				>> let b   = JSON.parse(JSON.stringify(a)); --> This will create a deep copy.
		
		# Making Deep Copies ofArrays :--
			Ex1 :-- Using spread operator :--
				>> cosnt a = [1,2,3];
				>> let b   = [...a];
			Ex2 :-- Using map,filter,reduce :--
				>> const a = [1,2,3];
				>> let b   = a.map(el=>el);
				>> let c   = a.slice(0);

----------------------------------------------------------------------------------------------------------------------------------------------------------

	* Difference between Javascript methods and Functions :--
	
	
----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	* What are Javascript Promises:--
		A Promise in JavaScript is an object representing the eventual completion or failure of an asynchronous operation.
		It enables you to register callbacks for notifications when the operation completes or fails and to handle errors 
		or results. Promises provide a way to write asynchronous code that is more readable and manageable than using 
		callback functions. A Promise has three states, which are Pending, Fulfilled and Rejected.Creating a Promise is
		possible using the Promise constructor, which requires the executor function. The executor function receives two 
		arguments, namely, resolve and reject. You can call resolve when the operation succeeds and reject when the operation fails.
		
----------------------------------------------------------------------------------------------------------------------------------------------------------
		
	* Out-Of-Bound Index Assignment :--
		* Ex :-- 
		>> const x = [1,2,3,4]
		>> x[100]  = 'jeman'
		>> console.log(x) ----> [1,2,3,4,<96 empty items>,'jeman'] 
		
		* Arrays in JS are dynamic and sparse 
		* >> console.log(x[96]) --> will give 'undefined'
		* >> console.log(x.length) --> will give 101
	
----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	* Functions as Objects :--
		* JS Functions are Objects.
		* This means you can attach props to them like any other object.
		* Ex :-- function abc() {
			 	console.log(abc.xyz);
			 		}
			 abc();---> output :-- 'undefined'
			 abc.xyz = 'jeman';
			 abc(); --> output :-- 'jeman'
		* Also JS Functions can :--
			* Be assigned to variables and properties.
				* Ex:--
				>> function greet() {
				>>	console.log('hello');
				>> 	}
				>> greet.language = 'English';
				>> console.log(greet.language); --> 'English'
				* Ex2:--
				>> 
			* Be passed as args to other functions.
			* Be returned from other functions.
			* Have props and methods attached to them.
			
----------------------------------------------------------------------------------------------------------------------------------------------------------
			
