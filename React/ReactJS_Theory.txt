React JS :--
    * A Frontend Open Source Framework which is used to develop user interfaces specifically for applications with single page.
    * Different content is rendered on that single page page dynamically according to User/Clients Requests.

---------------------------------------------------------------------------------------------------------------------------------------------

React Project Setup :--
    /app_root_folder/
        /node_modules/
        /public/
            /favicon.ico
            /index.html -------> Acts as the entry point of the web app. Has the foundational HTML structure where all content is 
            /manifest.json       dynamically rendered
            /logo192.png
            /logo512.png
        /src/ -----------------> Means Source Files Folder
            /App.css ----------> Css for App.js Component
            /App.js -----------> A basic react component
            /AppTest.js
            /index.css --------> Css for index.js component
            /index.js ---------> Contains js code to render components like 'App.js' into index.html
            /logo.svg
            /reportWebVitals.js -> Contains code to measure performace metrics and capture user experience
            /SetupTests.js -----> Used to run tests on the web app
        /.gitignore
        /package.json ----------> Contains all react npm scripts, list of dependencies installed in 'node_modules'

---------------------------------------------------------------------------------------------------------------------------------------------

React Components :--
    * React components are re-usable,independent pieces of code that define specific parts of a UI.
    * Each Component has it own JS Logic to render content on different parts of the UI.
    * Each Component has Phases in it lifecycle from creation to removal from DOM.
    * Two Types of Components :--
        Functional Componenets :--
            Example :-- 
                src/components/Comp1.js :--
                    >> export default function Comp1() {
                    >>      return (
                    >>          <div>
                    >>              <h1>This is Comp1</h1>
                    >>          </div>
                    >>              )
                    >>                                 }

            Function Component Life Cycle :--
                * Mounting :-- In mounting phase, a func comp is created and added to DOM. In this phase, you intialize state and 
                render the comp for the first time.
                               Usually useState can be used to intialize state and useEffect with empty dependency array to run some
                code for the first time when the DOM renders.
                * Updating :-- In this phase, a func comp is re-rendered on to the DOM when there's a change in props or state vars.
                               You can use useState to update state vars and useEffect with non-empty dependency array to re-render the
                component when prop/state vars inside the dependency array is updated.
                * Un-Mounting :-- In this pase, the comp in being removes from the DOM. A cleanup func inside useEffect hooks can do it.
                                  By returning a function with cleanup code from 'useEffect' hook you can perform un-mounting.

        Class Components :--
            Example :--
                src/index.js:--
                    >> class Comp2 extends React.Component {
                    >>      render () {
                    >>          return <h1>This is Comp2</h1>
                    >>                }
                # inside 'index.js' file , write root.render(<Comp/>);
            Class Component Life Cycle :--
                * Mounting :-- 
    * It's better to use Fucntional components than Class componenets.

-------------------------------------------------------------------------------------------------------------------------------------------

JSX:--
    * Rendering HTML without JSX:--
            ______FILL THIS______
    * Rendering with JSX:--
        >> const myElem = <h1>I Love JSX</h1>
        >> const root   = ReactDOM.createRoot(document.getElementById("root"));
        >> root.render(myElem);
    * Expressions in JSX :--
        >> const name   = 'jeman'
        >> const myElem = <h1> My name is {name} and i am {5+5} years old</h1>
        >> const root   = ReactDOM.createRoot(document.getElementById('root'));
        >> root.render(myElem);
    * Unlike the above example if the element has HTML with multiple tags, they all must be wrapped in one top level element.
    * All tags inside JSX HTML must be properly closed.    
    * Since 'class' keyword is reserved for OOPs in JS, 'className' is used as attribute name in JSX
    * Don't use 'if' conditions inside JSX. Use it outside. Otherwise use 'ternary' operators inside JSX '{}' brackets.

--------------------------------------------------------------------------------------------------------------------------------------------

React Events :--
    * Create a button or anchor tag with a html event in it. 
        >> <button onClick = {func1}> Click Me </button> --> func1 says what to do when you click 'Click Me'.
    * Each event handler has an argument by default, 'e'. This gives us access to the DOM element that triggered the event.
    * 

---------------------------------------------------------------------------------------------------------------------------------------------

Props :--
    * 'props' for 'Properties'
    * Props are arguments passed into React components.
    * Props are passed to components via HTML attributes.
    * Example :-- >> const myElem = <Car brand='Ford' />
                  /Car.js :--
                  >> function Car(props){
                  >>    return <h1>I am {props.brand}</h1>
                  >>                    }
    * Sending Props from one component to another.
        Example :--
                  >> function Car(props) {
                  >>    return <h1>I am {props.brand}</h1>
                  >>                     }
               
                  >> function Garage() {
                  >>    const company = 'Ford';
                  >>    return (
                  >>        <div>
                  >>            <h1>Hi !</h1>
                  >>            <Car brand={company}/>
                  >>        </div>
                  >>            )
                  >>                   }
                  >> const root = ReactDOM.createRoot(document.querySelector('#root'));
                  >> root.render(<Garage/>);

----------------------------------------------------------------------------------------------------------------------------------------------

State :--
    * React Components has a built-in state object.
    * The State object is where you store the property values that belong to the component.
    * When the State object changes , the component re-renders.
    * State can be set/changed with 'useState' HOOK.

----------------------------------------------------------------------------------------------------------------------------------------------

Props vs State :--

----------------------------------------------------------------------------------------------------------------------------------------------

React Conditional Rendering :--
    * To Conditionally render a component you can use 'if' conditions.
        # Comp1:--
        >> function MissedGoal(){
        >>      return <h1>MISSED :( </h1>
        >>                      }

        # Comp2:--
        >> function MadeGoal(){
        >>      return <h1> GOAL :) </h1>
        >>                    }

        >> function Goal(props){
        >>      const isGoal = props.isGoal;
        >>      if (isGoal) {
        >>          return <MadeGoal/>
        >>                  }
        >>      return <MissedGoal/>
        >>                      }
        
        >> root.render(<Goal isGoal = {false}/>);

    * You can also use Logical Operator && :--
        >> { cars.length > 2 && <h1>You have more than 2 cars</h1> }

    * You can also use Ternary Operators :--
        >> function Goal(props){
        >>      const isGoal = props.isGoal;
        >>      return (
        >>          <div>
        >>              {isGoal ? <MadeGoal/> : <MissedGoal/>}
        >>          </div>
        >>              )
        >>                      };
        >> root.render(<Goal isGoal = {false} />};

---------------------------------------------------------------------------------------------------------------------------------------------

React Hooks :--
    * React hooks are functions that let you use different React features from functional components .
    * Hooks allow functional components to have access to state and other React features.
    # Hooks are a main reason class components are generally no longer used.
    * useState :--
        * The react useState hook allows use to add and track state variables in funtional components.
        * Every time a state variable is changed, the whole component will be re-rendered.
        * Example :--
            >> import {useState} from 'react';
            >> import [color,setColor] = useState('');
            >> return (
            >>      <div>
            >>          <h1>My fav color is {color}</h1>
            >>          <button onClick = {()=>{setColor('blue')}}>Click me to change color</button>
            >>      </div>
            >>          );
        * Previous state refers to the state value of a component before the most recent update.
        * Creating a Counter with useState :--
            >> const [count,setCount] = useState(0);
            >> function handleIncrement = () => {
            >>      setCount(prevCount => prevCount + 1);
            >>                                   }
            >> return (
            >>      <button onClick={handleIncrement}>Count : {count}</button>
            >>        );
     
    * useEffect :--
        * It allows you to perform side effects on your functional components, like fetching data, directly updating DOM, and timers.
        * useEffect takes 2 args. First one is a function that explains the side effect. Second one is a dependency array that tells you
          when to invoke the function.
        * If the dependency array is non empty, the function passed as 1st arg will be invoked whenever the component is invoked and variables
          in dependency are updated/changed.
        * If the dependency array is empty, the function will run only once when component is mounted.
        * If there's no dependency array, the functino will run when component is mounted and also every time the component is re-rendered.
        * Example :--
            >> import {useState,useEffect} from 'react';
            >> export default Comp1 = () => {
            >>      useEffect(()=>{
            >>          --------Code to do tasks------
            >>                     },[statevar1,statevar2])
            >>                               };

    * useContext :--
        * A React hook that's used to manage state variables GLOBALLY.
        * The Parent Component should have access to React State before it can be shared with other child/nested components.
        * The Process of in-efficiently passing the state as 'props' through east nested components from the top most parent component is 
          called 'prop-drilling'.
        * The solution for 'prop-drilling' is, using 'useContext'.
        * Example of Prop-Drilling:--
             >> import { useState } from "react";
             >> import ReactDOM from "react-dom/client";

             >> function Component1() {
             >> const [user, setUser] = useState("Jesse Hall");

             >> return (
             >>    <>
             >>      <h1>{`Hello ${user}!`}</h1>
             >>      <Component2 user={user} />
             >>    </>
             >>  );
             >> }

             >> function Component2({ user }) {
             >>  return (
             >>    <>
             >>      <h1>Component 2</h1>
             >>      <Component3 user={user} />
             >>    </>
             >>  );
             >> }

             >> function Component3({ user }) {
             >>  return (
             >>    <>
             >>      <h1>Component 3</h1>
             >>      <Component4 user={user} />
             >>    </>
             >>  );
             >> }

             >> function Component4({ user }) {
             >>  return (
             >>    <>
             >>     <h1>Component 4</h1>
             >>     <h2>{`Hello ${user} again!`}</h2>
             >>    </>
             >>  );
             >> }
             >> const root = ReactDOM.createRoot(document.getElementById('root'));
             >> root.render(<Component1 />);
       * Solution for this using 'useContext':--
             >> import { useState, createContext, useContext } from "react";
             >> import ReactDOM from "react-dom/client";

             >> const UserContext = createContext();

             >> function Component1() {
             >>   const [user, setUser] = useState("Jesse Hall");

             >>   return (
             >>    <UserContext.Provider value={user}>
             >>      <h1>{`Hello ${user}!`}</h1>
             >>      <Component2 />
             >>    </UserContext.Provider>
             >>  );
             >> }

             >> function Component2() {
             >>   return (
             >>     <>
             >>       <h1>Component 2</h1>
             >>       <Component3 />
             >>     </>
             >>   );
             >> }

             >> function Component3() {
             >>   return (
             >>     <>
             >>       <h1>Component 3</h1>
             >>       <Component4 />
             >>     </>
             >>   );
             >> }

             >> function Component4() {
             >>   return (
             >>     <>
             >>      <h1>Component 4</h1>
             >>      <Component5 />
             >>    </>
             >>  );
             >> }

             >> function Component5() {
             >>   const user = useContext(UserContext);

             >>   return (
             >>     <>
             >>       <h1>Component 5</h1>
             >>       <h2>{`Hello ${user} again!`}</h2>
             >>     </>
             >>   );
             >> }

             >> const root = ReactDOM.createRoot(document.getElementById('root'));
             >> root.render(<Component1 />);

--------------------------------------------------------------------------------------------------------------------------------------------


