What is Redis :--
    -> Redis is a in-memory data store
    -> It's a key-value structure.
    -> Traditionally used as a caching layer.
    -> Data is stored in ram [so, very fast]
    -> Usually if an api has to connect to a database to get data,
       it would take time. But using Redis as a caching layer can save time.
    -> It stores queried data temporarily to save time when queries are repetitive
       or similar to each other.
    -> Redis' cache is stored on server -side
    -> The disadvantage of Redis as a caching layer is, when the server restarts or crashes,
       the data will be deleted.
    -> But due to improvements, Redis can now be used as a primary database.
    -> This is due to features like Data Persistance, JSON Support, Search, Redis OM [Object Mapper] 
    -> The Above features attached as modules to Redis Core, together form Redis Stack.
    -> Data Types in Redis :--
            * Key - Value pairs with key as identifier. Ex : name --> 'jeman'
                                                             age  --> 27
            * The Values can be 'string' [ex: 'Jeman']
                                'sets'   [ex: {'jeman','jeevan','kumar'}] --> unordered, unique elements
                                'hashes' -> Data structures that allow you to store multiple field-value
                                           pairs under a single key. Each field-value pair within a hash
                                           is referred to as a "field" and "value". They look like objects
                                'lists'  -> collection of elements which don't need to be unique.
                                'sorted sets' -> a collection of unique strings [members] ordered by an 
                                                associated score.
    -> Key-Value Pairs :--
    	* When it comes to storing key-value pairs with unique key,
    		Ex :-- books --> {'book1','book2'}
    	* Storing different books as hashes:
    		Ex :-- books:1 --> {title:"...",author:"..."} 
    		       books:2 --> {title:"...",author:"..."}
    		       * In the above example, 1 and 2 are IDs.

Using Redis Cloud and Redis Insight:--
	* Signup for a free account on Redis website.
	* You will be redirected to 'Redis Cloud Console'/Dashboard.
	* Create a database and from the 'Databases' tab download 'Redis Insight'
	* 'Redis Insight' is like 'Mongoose Compass'.
	* Open 'Redis Insight'. The UI is intuitive.
	* The 'Workbench' tab in 'Redis Insight' allows us to execute commands to screw with data.
Redis Basic Commands :--
	* Strings & Numbers :--
		>> SET name "jeman" --> will save as string
		>> SET name jeman   --> will save as string as well
		>> SET name jeman kumar --> Error :-- if space is included, use quotes.
		>> SET name 'jeman kumar' --> THis works.
		
		>> GET name --> Will get the value of the key 'name'
		
		>> DEL name --> Will delete the data with key as 'name'.
		
		>> MSET name1 jeman name2 'jeman n' rating 10 --> MSET [multiple set]
		>> MGET name1 name1 rating --> [Multiple GET]
		
		>> GETRANGE name 0 3 --> if 'jeman', output will be 'jema' --> 0,1,2,3 characters in the string 'jeman'
		>> GETRANGE name -3 -1 --> if 'jeman', output will be 'man' --> -3 -2 -1 characters in the string 'jeman'
		
		>> SETRANGE name 2 abc --> if 'jeman', output will be 'jeabc' --> from char 2 it will insert 'abc' by removing everything.
		
		>> INCR rating --> rating which is now '10' will be increased to '11'
		>> DECR rating --> it wil go back to 10
		>> INCRBY rating 5 --> it will increase to 15
		>> DECRBY rating 5 --> it will be back to 10
		
		>> SET name jeman GET :-- if 'name' was initially 'jeevan', this command will change the 'name' value to 'jeman' and print 'jeevan'
	* SETS :-- a list of elements that are unordered and unique:--
		>> SADD names jeman jeevan john doe --> will create SET with key 'names' and value {jeman,jeevan,john,doe}
		>> SREM names jeman --> Will delete 'jeman' from the set 'names'
		>> SADD moreNames link zelda
		>> SUNION names moreNames --> will create union between 'names' and 'moreNames' --> {jeman,jeevan,john,doe,link,zelda}
		>> SISMEMBER names link --> will check if 'name' has 'link' inside the set.'1' if true and '0' if false.
		
	* LISTS :-- A collection of elements that need not be unique:--
		* Lists in Redis behave like Linked Lists. Elements of Lists are not saved in Consecutive memory blocks. Instead they are scattered randomly with each element storing the
		value and the location of the next element.
		* Hence accessing an element inside the list is slow compared to 'pop' or 'push' which are fast.
		* Lists are best used when it comes to situations where you have to keep the lenght constant. So, when a new one is pushed into the list the first one should be popped from
		the front:-
			ex :-- List of last 10 queries made by a user.
		
