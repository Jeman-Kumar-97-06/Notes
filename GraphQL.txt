Graph QL :--
	* GraphQL is an open-source data query and manipulation lang for APIs and a runtime for fulfilling queries with existing data.
	* It's an alternative to REST Apis, with added benifits such as the ability to request exact data that you want without over / under fetching .

How REST Api works :--
	        get/post/put/delete	  	Req
	Client ---------------------> REST Api ----------> Server
	       <--------------------  /api/proj <-------
		Res Data	      /api/p/id    Res
		 		      /api/c/id
		 		      etc.......
		 		      Many such
		 		      endpoints!
		 		      
How Graph QL works :--
		Apollo Client:
		proj(id:'2'){name,client{
				    name			
				    	}}			Request
	     ------------------------------->		 --------------------->
       Client 				       Graph QL 			 Server
             <------------------------------		 <---------------------
             		Res Data		one		Response
             				      endpoint
             				      
Graph Queries :--
	* Typical Query : "Get me all the games. But each game should only have title, id and review. Even in that review, i only need rating and pub_date.
		>> query Query1{
		>>	games{
		>>		title,
		>>		id,
		>>		reviews : {
		>>			rating,
		>>			pub_date
		>>			 }
		>>	}
		>>		}
	* Typical Query2 : "Get me a client with id as 100. get his/her name and age.
		>> query Query2{
		>>	client (id:'100'){
		>>		name,
		>>		age
		>>		}
		>>	};

GraphQL mutations :-- Used to do CRUD ops on data.
	* Typical Mutation :-- add a project with name, descript, status, and ClientID. If successful return it with only name and descript fields.
		>> mutation MutationName {
		>>	addProject (
		>>		name : 'Mobile APp',
		>>		descript : 'nice app',
		>>		status : 'not started',
		>>		clientID: '1'){
		>>			name,
		>>			descript
		>>				}
		>>			}
		
* For Rest apis we use Postman, for graph ql we use 'GraphiQL' or "Apollo Server".

* GraphQL Schemas & Types :--
	* The GraphQL type system describes what data can be queried from the API. 
	The collection of those capabilities is referred to as the serviceâ€™s schema 
	and clients can use that schema to send queries to the API that return predictable results.
	* While schemas specifies all the fields, types tell the data type of those fields.
	* Most basic GraphQL type is Object Type.
		Ex :-- type Project { --------------> "Project" is a Object type
				name : String!,  ---> "name" is a String Type
				descript : String!
				}
	* ID,String,Int,Float come under Scalar Type.

* Doing a project :-- 
	* Npm install express, express-graphql, graphql, mongoose, cors, colors.
	* Also install nodemon, dotenv 
