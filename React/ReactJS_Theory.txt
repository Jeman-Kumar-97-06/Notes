React JS :--
    * A Frontend Open Source Framework which is used to develop user interfaces specifically for applications with single page.
    * Different content is rendered on that single page page dynamically according to User/Clients Requests.

---------------------------------------------------------------------------------------------------------------------------------------------

React Project Setup :--
    /app_root_folder/
        /node_modules/
        /public/
            /favicon.ico
            /index.html -------> Acts as the entry point of the web app. Has the foundational HTML structure where all content is 
            /manifest.json       dynamically rendered
            /logo192.png
            /logo512.png
        /src/ -----------------> Means Source Files Folder
            /App.css ----------> Css for App.js Component
            /App.js -----------> A basic react component
            /AppTest.js
            /index.css --------> Css for index.js component
            /index.js ---------> Contains js code to render components like 'App.js' into index.html
            /logo.svg
            /reportWebVitals.js -> Contains code to measure performace metrics and capture user experience
            /SetupTests.js -----> Used to run tests on the web app
        /.gitignore
        /package.json ----------> Contains all react npm scripts, list of dependencies installed in 'node_modules'

---------------------------------------------------------------------------------------------------------------------------------------------

React Components :--
    * React components are re-usable,independent pieces of code that define specific parts of a UI.
    * Each Component has it own JS Logic to render content on different parts of the UI.
    * Each Component has Phases in it lifecycle from creation to removal from DOM.
    * Two Types of Components :--
        Functional Componenets :--
            Example :-- 
                src/components/Comp1.js :--
                    >> export default function Comp1() {
                    >>      return (
                    >>          <div>
                    >>              <h1>This is Comp1</h1>
                    >>          </div>
                    >>              )
                    >>                                 }

            Function Component Life Cycle :--
                * Mounting :-- In mounting phase, a func comp is created and added to DOM. In this phase, you intialize state and 
                render the comp for the first time.
                               Usually useState can be used to intialize state and useEffect with empty dependency array to run some
                code for the first time when the DOM renders.
                * Updating :-- In this phase, a func comp is re-rendered on to the DOM when there's a change in props or state vars.
                               You can use useState to update state vars and useEffect with non-empty dependency array to re-render the
                component when prop/state vars inside the dependency array is updated.
                * Un-Mounting :-- In this pase, the comp in being removes from the DOM. A cleanup func inside useEffect hooks can do it.
                                  By returning a function with cleanup code from 'useEffect' hook you can perform un-mounting.

        Class Components :--
            Example :--
                src/index.js:--
                    >> class Comp2 extends React.Component {
                    >>      render () {
                    >>          return <h1>This is Comp2</h1>
                    >>                }
                # inside 'index.js' file , write root.render(<Comp/>);
            Class Component Life Cycle :--
                * Mounting :-- 
    * It's better to use Fucntional components than Class componenets.

-------------------------------------------------------------------------------------------------------------------------------------------

JSX:--
    * Rendering HTML without JSX:--
            ______FILL THIS______
    * Rendering with JSX:--
        >> const myElem = <h1>I Love JSX</h1>
        >> const root   = ReactDOM.createRoot(document.getElementById("root"));
        >> root.render(myElem);
    * Expressions in JSX :--
        >> const name   = 'jeman'
        >> const myElem = <h1> My name is {name} and i am {5+5} years old</h1>
        >> const root   = ReactDOM.createRoot(document.getElementById('root'));
        >> root.render(myElem);
    * Unlike the above example if the element has HTML with multiple tags, they all must be wrapped in one top level element.
    * All tags inside JSX HTML must be properly closed.    
    * Since 'class' keyword is reserved for OOPs in JS, 'className' is used as attribute name in JSX
    * Don't use 'if' conditions inside JSX. Use it outside. Otherwise use 'ternary' operators inside JSX '{}' brackets.

--------------------------------------------------------------------------------------------------------------------------------------------

React Events :--
    * Create a button or anchor tag with a html event in it. 
        >> <button onClick = {func1}> Click Me </button> --> func1 says what to do when you click 'Click Me'.

---------------------------------------------------------------------------------------------------------------------------------------------

Props :--
    * 'props' for 'Properties'
    * Props are arguments passed into React components.
    * Props are passed to components via HTML attributes.
    * Example :-- >> const myElem = <Car brand='Ford' />
                  /Car.js :--
                  >> function Car(props){
                  >>    return <h1>I am {props.brand}</h1>
                  >>                    }
    * Sending Props from one component to another.
        Example :--
                  >> function Car(props) {
                  >>    return <h1>I am {props.brand}</h1>
                  >>                     }
               
                  >> function Garage() {
                  >>    const company = 'Ford';
                  >>    return (
                  >>        <div>
                  >>            <h1>Hi !</h1>
                  >>            <Car brand={company}/>
                  >>        </div>
                  >>            )
                  >>                   }
                  >> const root = ReactDOM.createRoot(document.querySelector('#root'));
                  >> root.render(<Garage/>);

----------------------------------------------------------------------------------------------------------------------------------------------

State :--
    * React Components has a built-in state object.
    * 
